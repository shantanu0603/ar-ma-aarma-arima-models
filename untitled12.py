# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RqkwzDdDZJDE6E5PE8cc8lD2bW1r_sN5

AR MODEL
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.ar_model import AutoReg

# Generate some example data
np.random.seed(0)
n = 100
ar_params = [0.5, -0.2]  # Autoregressive parameters
mean = 0
std_dev = 1
data = [np.random.normal(mean, std_dev)]
for i in range(1, n):
    value = mean
    for j in range(len(ar_params)):
        value += ar_params[j] * data[i - j - 1]
    value += np.random.normal(mean, std_dev)
    data.append(value)

# Convert data to pandas Series
data_series = pd.Series(data)

# Fit the AR model
lag = 2  # Number of lag observations included in the model
model = AutoReg(data_series, lags=lag)
model_fit = model.fit()

# Make predictions
predictions = model_fit.predict(start=lag, end=n-1)

# Plot original data and predictions
plt.plot(data_series, label='Original Data')
plt.plot(predictions, color='red', label='AR Model Predictions')
plt.xlabel('Time')
plt.ylabel('Value')
plt.title('AR Model')
plt.legend()
plt.show()

#MA MODEL

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA

# Generate example data
np.random.seed(0)
n = 100
mean = 0
std_dev = 1
data = np.random.normal(mean, std_dev, n)

# Convert data to pandas Series
data_series = pd.Series(data)

# Fit the MA model
order = (0, 1, 1)  # (p, d, q) - In this case, MA(1) model
model = ARIMA(data_series, order=order)
model_fit = model.fit()

# Make predictions
predictions = model_fit.predict(start=1, end=n-1, typ='levels')

# Plot original data and predictions
plt.plot(data_series, label='Original Data')
plt.plot(predictions, color='red', label='MA Model Predictions')
plt.xlabel('Time')
plt.ylabel('Value')
plt.title('MA Model')
plt.legend()
plt.show()

#ARIMA

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA

# Generate example data
np.random.seed(0)
n = 100
mean = 0
std_dev = 1
data = np.random.normal(mean, std_dev, n)

# Convert data to pandas Series
data_series = pd.Series(data)

# Fit the ARMA model
order = (2, 0, 1)  # (p, d, q) - In this case, ARMA(2,1) model
model = ARIMA(data_series, order=order)
model_fit = model.fit()

# Make predictions
predictions = model_fit.predict(start=1, end=n-1, typ='levels')

# Plot original data and predictions
plt.plot(data_series, label='Original Data')
plt.plot(predictions, color='red', label='ARMA Model Predictions')
plt.xlabel('Time')
plt.ylabel('Value')
plt.title('ARMA Model')
plt.legend()
plt.show()

#ARIMA

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA

# Generate example data
np.random.seed(0)
n = 100
mean = 0
std_dev = 1
data = np.random.normal(mean, std_dev, n)

# Convert data to pandas Series
data_series = pd.Series(data)

# Fit the ARIMA model
order = (2, 1, 1)  # (p, d, q) - In this case, ARIMA(2,1,1) model
model = ARIMA(data_series, order=order)
model_fit = model.fit()

# Make predictions
predictions = model_fit.predict(start=1, end=n-1, typ='levels')

# Plot original data and predictions
plt.plot(data_series, label='Original Data')
plt.plot(predictions, color='red', label='ARIMA Model Predictions')
plt.xlabel('Time')
plt.ylabel('Value')
plt.title('ARIMA Model')
plt.legend()
plt.show()